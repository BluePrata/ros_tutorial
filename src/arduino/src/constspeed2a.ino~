#if (ARDUINO >=100)
  #include <Arduino.h>
#else
  #include <WProgram.h>
#endif

#include <ros.h>
#include <ros/time.h>
#include <std_msgs/UInt16.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/PoseArray.h>

#include <AccelStepper.h>
#define stp 22
#define dir 23
#define MS1 19
#define MS2 20
#define MS3 21
#define EN 18

AccelStepper stepper(4,22,23,19,20); // Defaults to 4 pins on 2, 3, 4, 5

std_msgs::UInt16 stageMsg;
std_msgs::UInt16 cmd_msg;
std_msgs::UInt16 doneMsg;
std_msgs::String string_msg;
std_msgs::UInt16 stepMsg;

geometry_msgs::Pose moveArray;

int stage1 = 0;
int stage2 = 200;
int stage3 = 400;

int current_stage = 0;
long current_step;

int direction;
int desired_stage;

void checkStage(int stage)
{

   //compare current satge with desired stage
   if (stage < current_stage)
   {
      direction = 0;
   }
   else
   {
      direction = 1;
   }
   int diff = abs(stage - current_stage);

   moveArray.position.x = direction;
   moveArray.position.y = diff*200;

  //motorCmd.publish(&moveArray);
}

void currentStage(long reading)
{
  current_step = reading;
//   current_step=stepper.currentPosition().data;
   if (current_step <0)
   {
      current_step = 0;
   }
   if (current_step == 0)
   {
      current_stage = 1;
   }
   if (current_step == 200)
   {
      current_stage = 2;
   }
   if (current_step == 400)
   {
      current_stage = 3;
   }

}


//callback function to set stage (1-3)
void MotorCb ( const std_msgs::UInt16& msg)
{

   desired_stage = msg.data;
   checkStage(desired_stage);
   if(moveArray.position.x == 0)
   {
     digitalWrite(dir, 0);
   }
   if(moveArray.position.x == 1)
   {
     digitalWrite(dir,1);
   }
   for(int x = 0; x < moveArray.position.y; x ++)
   {
      digitalWrite(stp, 1);
      delay(1);
      digitalWrite(stp, 0);
      delay(1);
      // if (x == moveArray.position.y - 1)
      // {
      //    doneMsg.data = 999;
	    //    motorCompletion.publish(&doneMsg);
      // }
    }
}


ros::NodeHandle nh;
ros::Publisher stagePub("Motor", &stageMsg);
ros::Subscriber<std_msgs::UInt16> motorSub("controlMotor", MotorCb);
ros::Publisher MotorCompletion("MotorCompletion", &doneMsg);
// ros::Publisher motorCmd("ToGo", &moveArray);
ros::Publisher stepPub("/stepInfo", &stepMsg);



void setup()
{
   //stepper.setSpeed(500);
   //stepper.moveTo(400);
   nh.advertise(stagePub);
   nh.advertise(stepPub);
   nh.subscribe(motorSub);
  //  nh.advertise(motorCompletion);
  //  nh.advertise(moveArray);
}

void loop()
{
   nh.initNode();
   stepper.run();
   stepMsg.data = stepper.currentPosition();
   currentStage(stepMsg.data);
   stagePub.publish(&stageMsg);
   stepPub.publish(&stepMsg);
   nh.spinOnce();
   delay(1);

}
